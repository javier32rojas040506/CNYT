import unittest
from teoria_cuantica_basica import *

class ObservableandMeasuring(unittest.TestCase):

    def testproba_particle(self):

        self.assertEqual(proba_particle([(-3, -1), (0, -2), (0, 1), (2, 0)], 2), (2, 0.052629138617309376))
        self.assertEqual(proba_particle([((5/30)**1/2, 2/(30)**1/2), ((-2/(30)**1/2,-(5/30)**1/2)), (0,(2/5)**1/2)], 1), (1, 0.14420765902900176))
        self.assertEqual(proba_particle([(-2, -1), (1, -2), (0, 2), (2, 0)], 2), (2, 0.22218458662196602))
        self.assertEqual(proba_particle([(0, 0), (0, 0), (0, 0), (1, 0)], 3), (3, 1.0))

    def testamplitud_transicion(self):
        self.assertEqual(amplitud_transicion([(2, 1), (-1, 2), (0, 1), (1, 0), (3, -1), (2, 0), (0, -2), (-2, 1), (1, -3), (0, -1)],
                                             [(-1, -4), (2, -3), (-7, 6), (-1, 1), (-5, -3), (5, 0), (5, 8), (4, -4), (8, -7), (2, -7)]), [(-0.020557086632140443, -0.13019488200355614)] )
        self.assertEqual(amplitud_transicion([(((2)**(1/2))/2, 0), (0, ((2)**(1/2))/2)], [(0, ((2)**(1/2))/2), ( (-(2)**(1/2))/2, 0)]), [(0.0, -1.0000000000000002)])
        self.assertEqual(amplitud_transicion([(2, 1), (-1, 2), (0, 1), (1, 0), (3, -1), (2, 0), (0, -2), (-2, 1), (1, -3), (0, -1)],
                                             [(-1, -4), (2, -3), (-7, 6), (-1, 1), (-5, -3), (5, 0), (5, 8),(4, -4), (8, -7), (2, -7)]),
                                             [(-0.020557086632140443, -0.13019488200355614)])
        self.assertEqual(amplitud_transicion([(1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
                                             [(0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]), [(0.0, 0.0)])

    def testmedia(self):
        self.assertEqual(media([[(0, 0),(0, -1)],[(0, 1),(0, 0)]],[(1/(2**(1/2)), 0), (0, 1/(2**(1/2)))]), (0.9999999999999998, 0.0))
        self.assertEqual(media([[(1, 0),(0, -1)],[(1, 1),(0, 0)]],[(1/(2**(1/2)), 0), (0, 1/(2**(1/2)))]), "El observables no es hermitiano")
        self.assertEqual(media([[(5, 0),(3, 7)],[(3, -7),(2, 0)]],[(1/(2**(1/2)), 0), (0, 1/(2**(1/2)))]), (-3.4999999999999987, 0.0))
        self.assertEqual(media([[(0, 0),(0, -1)],[(0, 1),(0, 0)]],[(1/(2**(1/2)), 1), (-1, 1/(2**(1/2)))]), (3.0, 0.0))


    def testvarianza(self):
        self.assertEqual(varianza([[(0, 0),(0, -1)],[(0, 1),(0, 0)]],[(1/(2**(1/2)), 0), (0, 1/(2**(1/2)))]), (0.0, 0.0))
        self.assertEqual(varianza([[(1, 0),(0, -1)],[(1, 1),(0, 0)]],[(1/(2**(1/2)), 0), (0, 1/(2**(1/2)))]), "El observables no es hermitiano")
        self.assertEqual(varianza([[(5, 0),(3, 7)],[(3, -7),(2, 0)]],[(1/(2**(1/2)), 0), (0, 1/(2**(1/2)))]),(11.250000000000004, 0.0))
        self.assertEqual(varianza([[(0, 0),(0, -1)],[(0, 1),(0, 0)]],[(1/(2**(1/2)), 1), (-1, 1/(2**(1/2)))]), (12.0, 0.0))

    def testeigen_valuesvectors(self):
        self.assertEqual(eigen_valuesvectors([[0j, 1 + 0j], [1 + 0j, 0j]]), ([(0.9999999999999996, 0.0), (-0.9999999999999999, 0.0)], [[(0.7071067811865474, -0.0), (0.7071067811865475, 0.0)], [(0.7071067811865476, 0.0), (-0.7071067811865475, 0.0)]]))
        self.assertEqual(eigen_valuesvectors([[0j, -1j], [1j, 0j]]),([(0.9999999999999996, 0.0), (-0.9999999999999999, 0.0)], [[(-0.0, -0.7071067811865474), (0.7071067811865475, 0.0)], [(0.7071067811865476, 0.0), (0.0, -0.7071067811865475)]]))
        self.assertEqual(eigen_valuesvectors([[0j, -1j, 2-2j], [2+1j, 2+5j, 1+7j], [1j, 2+7j, 3+5j]]), ([(4.047014267690816, 11.56808775119902), (0.4577500924900139, 1.0575606085180604), (0.4952356398191757, -2.6256483597170743)], [[(-0.11942353258164415, -0.17456902074623112), (0.8817486259374302, 0.0), (-0.2840793435801329, -0.3674200967425155)], [(0.6577790765758859, 0.10591486483377269), (-0.16720273561835003, -0.2581033052677609), (0.6653374599840981, 0.0)], [(0.7151030727717798, 0.0), (-0.025894014361110107, 0.3567559245328912), (-0.5836681464021171, 0.030967051493920233)]]))
        self.assertEqual(eigen_valuesvectors([[0j, 0j], [0j, 0j]]), ([(0.0, 0.0), (0.0, 0.0)], [[(1.0, 0.0), (0.0, 0.0)], [(0.0, 0.0), (1.0, 0.0)]]))

    def testproba_vectors(self):
        self.assertEqual(proba_vectores([(1/(2**(1/2)), 1), (-1, 1/(2**(1/2)))], [[0j, 1 + 0j], [1 + 0j, 0j]], 0), [(-0.1195076636967961, 0.6965417087054514)])
        self.assertEqual(proba_vectores([(1/(2**(1/2)), 1), (-1, 1/(2**(1/2)))], [[0j, -1j], [1j, 0j]], 0), [(-0.8160493724022475, 0.5770340450086554)])
        self.assertEqual(proba_vectores([(1/(2**(1/2)), 1), (-1, 1/(2**(1/2))), (0, 0)], [[0j, -1j, 2-2j], [2+1j, 2+5j, 1+7j], [1j, 2+7j, 3+5j]], 0), [(-0.6459852736865083, 0.3553407578429846)])
        self.assertEqual(proba_vectores([(1/(2**(1/2)), 1), (-1, 1/(2**(1/2)))], [[0j, 0j], [0j, 0j]], 0), [(0.40802468620112375, 0.5770340450086555)])

    def testdynamicSystem(self):
        self.assertEqual(dynamicSystem([[(0, 0), (1/(2**(1/2)), 0), (1/(2**(1/2)), 0), (0, 0)],
                                        [(1/(2**(1/2)), 0), (0, 0), (0, 0), (-1/(2**(1/2)), 0)],
                                        [(1 / (2 ** (1 / 2)), 0), (0, 0), (0, 0), (1 / (2 ** (1 / 2)), 0)],
                                        [(0, 0), (-1/(2**(1/2)), 0), (1/(2**(1/2)), 0), (0, 0)]],
                                        [(1,0), (0,0), (0,0), (0,0)], 1),
                                        [[(0.0, 0.0)], [(0.7071067811865475, 0.0)],
                                         [(0.7071067811865475, 0.0)], [(0.0, 0.0)]])
        self.assertEqual(dynamicSystem([[(0,1),(0,0)],[(0,0),(0,1)]],[(1,0), (0,0)], 1), [[(0, 1)], [(0, 0)]])
        self.assertEqual(dynamicSystem([[(1,0),(0,0)],[(0,0),(1,0)]],[(1,0), (0,0)], 1), [[(1, 0)], [(0, 0)]])
        self.assertEqual(dynamicSystem([[(1,1),(0,0)],[(0,0),(1,1)]],[(1,0), (0,0)], 1), [[(1, 1)], [(0, 0)]])
if __name__ == '__main__':
    unittest.main()

# Author Francisco Javier Rojas Mu√±oz
